{"file_contents":{"README.md":{"content":"Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.\n\n## Getting Started\n\nHit the run button to start the development server.\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\n[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\n## Productionizing your Next App\n\nTo make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!\n\nYou can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.\n","size_bytes":1303},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.\n","size_bytes":213},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n}\n\nmodule.exports = nextConfig","size_bytes":117},"components/ClassList.tsx":{"content":"// components/ClassList.tsx\nimport styles from '../styles/Dashboard.module.css';\n\nexport default function ClassList({ classes, onClassSelect, selectedClassId }) {\n  return (\n    <div className={styles.card}>\n      <h2 className={styles.cardTitle}>Select a Class</h2>\n      <div className={styles.classList}>\n        {classes.map((cls) => (\n          <button\n            key={cls.id}\n            className={`${styles.classItem} ${selectedClassId === cls.id ? styles.active : ''}`}\n            onClick={() => onClassSelect(cls)}\n          >\n            {cls.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":624},"components/StudentList.tsx":{"content":"// components/StudentList.tsx\nimport styles from '../styles/Dashboard.module.css';\n\n// Define types for the props\ntype Class = { id: number; name: string; };\ntype Section = { id: number; name: string; };\ntype Student = { id: number; name: string; roll_number: number; };\n\ntype StudentListProps = {\n  students: Student[];\n  selectedClass: Class | null;\n  selectedSection: Section | null;\n};\n\nexport default function StudentList({ students, selectedClass, selectedSection }: StudentListProps) {\n  if (!selectedSection) {\n    return null;\n  }\n\n  return (\n    <div className={styles.card} style={{ marginTop: '30px' }}>\n      <h2 className={styles.cardTitle}>Students of {selectedClass?.name} - {selectedSection.name}</h2>\n      {students.length > 0 ? (\n        <table className={styles.studentTable}>\n          <thead>\n            <tr>\n              <th>Roll Number</th>\n              <th>Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {students.map((student) => (\n              <tr key={student.id}>\n                <td>{student.roll_number}</td>\n                <td>{student.name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No students found in this section.</p>\n      )}\n    </div>\n  );\n}\n","size_bytes":1276},"lib/supabaseClient.js":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":244},"pages/_app.tsx":{"content":"import '../styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp","size_bytes":187},"pages/dashboard.tsx":{"content":"// pages/dashboard.tsx\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabaseClient.js';\nimport { useRouter } from 'next/router';\nimport styles from '../styles/Dashboard.module.css';\nimport { FiGrid, FiUpload, FiUser, FiLogOut, FiMenu, FiX } from 'react-icons/fi';\nimport ClassList from '../components/ClassList';\nimport StudentList from '../components/StudentList';\nimport Link from 'next/link';\nimport type { User } from '@supabase/supabase-js';\n\n// Define types for our data\ntype Class = { id: number; name: string; };\ntype Section = { id: number; name: string; class_id: number; };\ntype Student = { id: number; name: string; roll_number: number; };\n\n// New SectionList Component with correct types\nfunction SectionList({ sections, onSectionSelect, selectedSectionId }: { sections: Section[], onSectionSelect: (section: Section) => void, selectedSectionId: number | null }) {\n  if (sections.length === 0) return null;\n  return (\n    <div className={styles.card} style={{ marginTop: '20px' }}>\n      <h2 className={styles.cardTitle}>Select a Section</h2>\n      <div className={styles.classList}>\n        {sections.map((sec) => (\n          <button\n            key={sec.id}\n            className={`${styles.classItem} ${selectedSectionId === sec.id ? styles.active : ''}`}\n            onClick={() => onSectionSelect(sec)}\n          >\n            {sec.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isSidebarOpen, setSidebarOpen] = useState(false);\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [selectedClass, setSelectedClass] = useState<Class | null>(null);\n  const [selectedSection, setSelectedSection] = useState<Section | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchClasses = async () => {\n      const { data } = await supabase.from('classes').select('*');\n      setClasses(data || []);\n    };\n    fetchClasses();\n  }, []);\n  \n  const handleClassSelect = async (cls: Class) => {\n    setSelectedClass(cls);\n    setSelectedSection(null);\n    setStudents([]);\n    const { data } = await supabase.from('sections').select('*').eq('class_id', cls.id);\n    setSections(data || []);\n  };\n\n  const handleSectionSelect = async (sec: Section) => {\n    setSelectedSection(sec);\n    const { data } = await supabase.from('students').select('*').eq('section_id', sec.id).order('roll_number');\n    setStudents(data || []);\n  };\n\n  useEffect(() => {\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (!session) router.push('/');\n      else setUser(session.user);\n    });\n    return () => subscription.unsubscribe();\n  }, [router]);\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut();\n    router.push('/');\n  };\n\n  if (!user) return <div className={styles.loading}>Loading...</div>;\n\n  return (\n    <div className={styles.dashboardLayout}>\n      <aside className={`${styles.sidebar} ${isSidebarOpen ? styles.open : ''}`}>\n        <div className={styles.sidebarHeader}>\n          <h2>School Panel</h2>\n          <button className={styles.closeButton} onClick={() => setSidebarOpen(false)}><FiX /></button>\n        </div>\n        <nav className={styles.sidebarNav}>\n          <ul>\n            <li><Link href=\"/dashboard\" className={styles.active}><FiGrid /> <span>Dashboard</span></Link></li>\n            <li><Link href=\"/upload-marks\"><FiUpload /> <span>Upload Marks</span></Link></li>\n            <li><Link href=\"#\"><FiUser /> <span>Profile</span></Link></li>\n          </ul>\n        </nav>\n        <button onClick={handleLogout} className={styles.logoutButton}><FiLogOut /> <span>Logout</span></button>\n      </aside>\n\n      <main className={`${styles.mainContent} ${isSidebarOpen ? styles.blurred : ''}`}>\n        <header className={styles.header}>\n          <div className={styles.headerTitle}>\n            <button className={styles.hamburgerMenu} onClick={() => setSidebarOpen(!isSidebarOpen)}>\n              {isSidebarOpen ? <FiX /> : <FiMenu />}\n            </button>\n            <h1>Dashboard</h1>\n          </div>\n        </header>\n        \n        <ClassList classes={classes} onClassSelect={handleClassSelect} selectedClassId={selectedClass?.id} />\n        <SectionList sections={sections} onSectionSelect={handleSectionSelect} selectedSectionId={selectedSection?.id} />\n        <StudentList students={students} selectedClass={selectedClass} selectedSection={selectedSection} />\n      </main>\n    </div>\n  );\n}\n","size_bytes":4709},"pages/index.tsx":{"content":"// pages/index.tsx\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabaseClient.js';\nimport styles from '../styles/Login.module.css';\nimport { FiMail, FiLock } from 'react-icons/fi';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link'; // Import Link for navigation\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [typingFinished, setTypingFinished] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTypingFinished(true);\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setMessage('');\n    setLoading(true);\n\n    const { error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    });\n\n    if (error) {\n      setMessage('Error: Invalid login credentials.');\n      setLoading(false);\n    } else {\n      setMessage('Login successful! Redirecting...');\n      router.push('/dashboard');\n    }\n  };\n\n  return (\n    <div\n      className={styles.loginContainer}\n      style={{\n        backgroundImage: \"url('/background1.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n      }}\n    >\n      <div className={styles.mainLoginWrapper}>\n        <div className={styles.glassCard}>\n          <h2 className={styles.title} data-finished={typingFinished}>Teacher Login</h2>\n          <p className={styles.subtitle}>Please sign in to continue</p>\n          <form onSubmit={handleLogin} className={styles.loginForm}>\n            <div className={styles.inputGroup}>\n              <FiMail className={styles.icon} />\n              <input\n                type=\"email\"\n                placeholder=\"Your Email ID\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className={styles.inputField}\n              />\n            </div>\n            <div className={styles.inputGroup}>\n              <FiLock className={styles.icon} />\n              <input\n                type=\"password\"\n                placeholder=\"Your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className={styles.inputField}\n              />\n            </div>\n            <button type=\"submit\" disabled={loading} className={styles.loginButton}>\n              {loading ? 'Logging in...' : 'Login'}\n            </button>\n          </form>\n          {message && <p className={styles.message} style={{ color: message.startsWith('Error') ? '#ff9a9a' : '#a2ff9a' }}>{message}</p>}\n        </div>\n\n        {/* This is the new Admin Login link card */}\n        <div className={styles.adminLinkCard}>\n          <p>\n            Are you an Administrator? <Link href=\"/admin\"><span>Login Here</span></Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3128},"pages/upload-marks.tsx":{"content":"// pages/upload-marks.tsx\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabaseClient.js';\nimport { useRouter } from 'next/router';\nimport styles from '../styles/Dashboard.module.css';\nimport uploadStyles from '../styles/UploadMarks.module.css';\nimport type { User } from '@supabase/supabase-js';\n\n// Define types for our data\ntype Class = { id: number; name: string; };\ntype Section = { id: number; name: string; };\ntype Exam = { id: number; name: string; };\ntype Subject = { id: number; name: string; };\ntype Student = { id: number; name: string; roll_number: number; };\n\nexport default function UploadMarks() {\n  const [user, setUser] = useState<User | null>(null);\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [exams, setExams] = useState<Exam[]>([]);\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [students, setStudents] = useState<Student[]>([]);\n  \n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSection, setSelectedSection] = useState('');\n  const [selectedExam, setSelectedExam] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  \n  const [marks, setMarks] = useState<{ [key: number]: string }>({});\n  const [fullMarks, setFullMarks] = useState('100');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const router = useRouter();\n\n  useEffect(() => {\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n        if (!session) {\n            router.push('/');\n        } else {\n            setUser(session.user);\n        }\n    });\n    return () => subscription.unsubscribe();\n  }, [router]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: classData } = await supabase.from('classes').select('*');\n      setClasses(classData || []);\n      const { data: examData } = await supabase.from('exams').select('*');\n      setExams(examData || []);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedClass) {\n      const fetchSectionsAndSubjects = async () => {\n        const { data: sectionsData } = await supabase.from('sections').select('*').eq('class_id', selectedClass);\n        setSections(sectionsData || []);\n        const { data: subjectsData } = await supabase.from('subjects').select('*').eq('class_id', selectedClass);\n        setSubjects(subjectsData || []);\n      };\n      fetchSectionsAndSubjects();\n      setSelectedSection('');\n      setSelectedSubject('');\n      setStudents([]);\n    }\n  }, [selectedClass]);\n\n  useEffect(() => {\n    if (selectedSection) {\n        const fetchStudents = async () => {\n            const { data } = await supabase.from('students').select('*').eq('section_id', selectedSection).order('roll_number');\n            setStudents(data || []);\n        };\n        fetchStudents();\n    }\n  }, [selectedSection]);\n\n  const handleMarkChange = (studentId: number, value: string) => {\n    setMarks(prev => ({ ...prev, [studentId]: value }));\n  };\n\n  const handleSaveMarks = async () => {\n    if (!user) {\n        setMessage('Error: User not found. Please log in again.');\n        return;\n    }\n    setLoading(true);\n    setMessage('');\n    \n    const recordsToUpsert = students.map(student => ({\n      student_id: student.id,\n      subject_id: selectedSubject,\n      exam_id: selectedExam,\n      marks_obtained: marks[student.id] || 0,\n      full_marks: parseInt(fullMarks, 10) || 100,\n      entered_by: user.id,\n    }));\n\n    const { error } = await supabase.from('results').upsert(recordsToUpsert, {\n      onConflict: 'student_id,subject_id,exam_id'\n    });\n    if (error) {\n      setMessage(`Error: ${error.message}`);\n    } else {\n      setMessage('Marks saved successfully!');\n    }\n    setLoading(false);\n  };\n\n  if (!user) return <div className={styles.loading}>Loading...</div>;\n\n  return (\n    <div className={uploadStyles.pageContainer}>\n      <header className={uploadStyles.header}>\n        <button onClick={() => router.push('/dashboard')} className={uploadStyles.backButton}>← Back to Dashboard</button>\n        <h1>Upload Marks</h1>\n      </header>\n      \n      <main className={uploadStyles.content}>\n        <div className={uploadStyles.selectorGrid}>\n          <select value={selectedClass} onChange={(e) => setSelectedClass(e.target.value)}>\n            <option value=\"\">Select Class</option>\n            {classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}\n          </select>\n          <select value={selectedSection} onChange={(e) => setSelectedSection(e.target.value)} disabled={!selectedClass}>\n            <option value=\"\">Select Section</option>\n            {sections.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}\n          </select>\n          <select value={selectedExam} onChange={(e) => setSelectedExam(e.target.value)}>\n            <option value=\"\">Select Exam</option>\n            {exams.map(e => <option key={e.id} value={e.id}>{e.name}</option>)}\n          </select>\n          <select value={selectedSubject} onChange={(e) => setSelectedSubject(e.target.value)} disabled={!selectedClass}>\n            <option value=\"\">Select Subject</option>\n            {subjects.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}\n          </select>\n        </div>\n\n        {selectedSection && selectedExam && selectedSubject && students.length > 0 && (\n            <div className={uploadStyles.marksCard}>\n                <div className={uploadStyles.cardHeader}>\n                    <h2>Enter Marks for {subjects.find(s => s.id == Number(selectedSubject))?.name}</h2>\n                    <div className={uploadStyles.fullMarksContainer}>\n                        <label htmlFor=\"fullMarks\">Full Marks:</label>\n                        <input\n                        id=\"fullMarks\"\n                        type=\"number\"\n                        className={uploadStyles.fullMarksInput}\n                        value={fullMarks}\n                        onChange={(e) => setFullMarks(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <table className={uploadStyles.marksTable}>\n                    <thead>\n                        <tr>\n                        <th>Roll Number</th>\n                        <th>Student Name</th>\n                        <th>Marks Obtained (out of {fullMarks || 'N/A'})</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {students.map(student => (\n                        <tr key={student.id}>\n                            <td>{student.roll_number}</td>\n                            <td>{student.name}</td>\n                            <td>\n                            <input \n                                type=\"number\" \n                                className={uploadStyles.markInput}\n                                value={marks[student.id] || ''}\n                                onChange={(e) => handleMarkChange(student.id, e.target.value)}\n                            />\n                            </td>\n                        </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <button onClick={handleSaveMarks} disabled={loading} className={uploadStyles.saveButton}>\n                    {loading ? 'Saving...' : 'Save Marks'}\n                </button>\n                {message && <p className={uploadStyles.message}>{message}</p>}\n            </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":7626},"styles/AdminDashboard.module.css":{"content":"/* styles/AdminDashboard.module.css */\n.dashboardLayout {\n  --bg-color: #F8F4E3;\n  --primary-color: #3d3d3d;\n  --gold-accent: #DAA520;\n  --card-bg: #FFFFFF;\n  --border-color: #EAE0C8;\n  \n  width: 100vw;\n  min-height: 100vh;\n  background-color: var(--bg-color);\n  font-family: 'Georgia', serif;\n  padding: 40px;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 50px;\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 3rem;\n  font-weight: normal;\n  color: var(--primary-color);\n}\n\n.header p {\n  font-size: 1.1rem;\n  color: #777;\n  margin-top: 10px;\n}\n\n/* Grid for the navigation cards */\n.navGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 30px;\n  max-width: 900px;\n  margin: 0 auto;\n}\n\n/* Individual Card Styles */\n.navCard {\n  background-color: var(--card-bg);\n  border-radius: 15px;\n  padding: 25px;\n  text-align: center;\n  box-shadow: 0 5px 20px rgba(0,0,0,0.07);\n  border: 1px solid var(--border-color);\n  text-decoration: none;\n  color: var(--primary-color);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  opacity: 0; /* Initially hidden for animation */\n}\n\n/* Staggered slide-in animation for cards */\n.navCard:nth-child(1) { animation: slideInUp 0.5s 0.1s ease-out forwards; }\n.navCard:nth-child(2) { animation: slideInUp 0.5s 0.2s ease-out forwards; }\n.navCard:nth-child(3) { animation: slideInUp 0.5s 0.3s ease-out forwards; }\n.navCard:nth-child(4) { animation: slideInUp 0.5s 0.4s ease-out forwards; }\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.navCard:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n}\n\n.cardIcon {\n  font-size: 2.5rem;\n  color: var(--gold-accent);\n  margin-bottom: 15px;\n}\n\n.cardTitle {\n  font-size: 1.3rem;\n  font-weight: bold;\n  margin: 0;\n}\n\n/* Logout Button at the bottom */\n.logoutButtonContainer {\n  text-align: center;\n  margin-top: 50px;\n}\n\n.logoutButton {\n  padding: 12px 30px;\n  font-size: 1rem;\n  color: var(--gold-accent);\n  background-color: transparent;\n  border: 1px solid var(--gold-accent);\n  border-radius: 25px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.logoutButton:hover {\n  background-color: var(--gold-accent);\n  color: white;\n}\n\n.loading {\n  /* ... existing styles ... */\n}","size_bytes":2325},"styles/Dashboard.module.css":{"content":"/* styles/Dashboard.module.css */\n\n.dashboardLayout {\n  --primary-dark: #3D52A0;\n  --primary-medium: #7091E6;\n  --primary-light: #8697C4;\n  --secondary-light: #ADBBDA;\n  --background-color: #EDE8F5;\n  --text-color-dark: #2c3e50;\n  --text-color-light: #ffffff;\n\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: linear-gradient(160deg, var(--background-color) 0%, var(--secondary-light) 100%);\n}\n\n.mainContent {\n  flex-grow: 1;\n  overflow-y: auto;\n  transition: filter 0.4s ease-in-out;\n}\n\n.mainContent.blurred {\n  filter: blur(5px) brightness(0.9);\n}\n\n/* --- New Header Styles --- */\n.header {\n  padding: 20px 40px;\n}\n.headerTitle {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n.headerTitle h1 {\n  margin: 0;\n  font-size: 2.5rem;\n  color: var(--primary-dark);\n}\n\n.welcomeMessage {\n  background-color: rgba(255, 255, 255, 0.7);\n  padding: 25px;\n  border-radius: 12px;\n  box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n  font-size: 1.1rem;\n  color: var(--text-color-dark);\n  margin: 0 40px;\n}\n\n/* --- Sidebar Styles --- */\n.sidebar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 280px;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(25px);\n  -webkit-backdrop-filter: blur(25px);\n  border-right: 1px solid rgba(255, 255, 255, 0.2);\n  display: flex;\n  flex-direction: column;\n  padding: 25px;\n  transform: translateX(-100%);\n  transition: transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);\n  z-index: 100;\n}\n\n.sidebar.open {\n  transform: translateX(0);\n}\n\n/* Find and update .sidebarHeader */\n.sidebarHeader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-align: left;\n  margin-bottom: 40px;\n}\n.sidebarHeader h2 {\n  margin: 0;\n  color: var(--primary-dark);\n  font-size: 1.8rem;\n}\n\n/* Add this new style for the close button */\n.closeButton {\n  background: transparent;\n  border: none;\n  color: var(--primary-dark);\n  font-size: 28px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px;\n  border-radius: 50%;\n  transition: background-color 0.2s, color 0.2s;\n}\n.closeButton:hover {\n  background-color: rgba(0,0,0,0.1);\n}\n\n.sidebarNav ul { list-style-type: none; padding: 0; margin: 0; }\n.sidebarNav li { opacity: 0; transform: translateX(-30px); }\n.sidebar.open .sidebarNav li { animation: slideAndFadeIn 0.5s ease-out forwards; }\n.sidebar.open .sidebarNav li:nth-child(1) { animation-delay: 0.1s; }\n.sidebar.open .sidebarNav li:nth-child(2) { animation-delay: 0.2s; }\n.sidebar.open .sidebarNav li:nth-child(3) { animation-delay: 0.3s; }\n.sidebar.open .sidebarNav li:nth-child(4) { animation-delay: 0.4s; }\n\n@keyframes slideAndFadeIn {\n  from { opacity: 0; transform: translateX(-30px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n.sidebarNav li a {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 15px;\n  color: var(--primary-dark);\n  text-decoration: none;\n  border-radius: 10px;\n  margin-bottom: 10px;\n  font-weight: 500;\n  background-color: rgba(255, 255, 255, 0.4);\n  transition: background-color 0.3s, transform 0.2s, box-shadow 0.3s;\n}\n.sidebarNav li a:hover {\n  background-color: rgba(255, 255, 255, 0.8);\n  transform: translateX(5px);\n  box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n}\n.sidebarNav li a.active {\n  background-color: var(--primary-dark);\n  color: var(--text-color-light);\n  font-weight: bold;\n}\n\n.logoutButton {\n  margin-top: auto;\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 15px;\n  font-size: 1rem;\n  font-weight: 500;\n  color: var(--primary-dark);\n  background-color: rgba(255, 255, 255, 0.4);\n  border: none;\n  border-radius: 10px;\n  cursor: pointer;\n  width: 100%;\n  text-align: left;\n}\n.logoutButton:hover {\n  background-color: #ffebee;\n  color: #c62828;\n}\n\n/* --- Hamburger Menu Style --- */\n.hamburgerMenu {\n  background: var(--primary-dark);\n  color: var(--text-color-light);\n  border: none;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  transition: transform 0.3s;\n}\n.hamburgerMenu:hover { transform: scale(1.1); }\n.loading { display: flex; justify-content: center; align-items: center; height: 100vh; font-size: 1.5rem; color: var(--primary-dark); }\n/* Add these new styles at the end of styles/Dashboard.module.css */\n\n.card {\n  background-color: #ffffff;\n  padding: 25px;\n  border-radius: 12px;\n  box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n}\n\n.cardTitle {\n  margin-top: 0;\n  margin-bottom: 20px;\n  color: var(--primary-dark);\n}\n\n.classList {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n}\n\n.classItem {\n  padding: 12px 25px;\n  font-size: 1rem;\n  font-weight: 500;\n  border: 1px solid var(--secondary-light);\n  border-radius: 8px;\n  background-color: #fff;\n  color: var(--primary-dark);\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.classItem:hover {\n  background-color: var(--secondary-light);\n  color: var(--primary-dark);\n}\n\n.classItem.active {\n  background-color: var(--primary-dark);\n  color: var(--text-color-light);\n  border-color: var(--primary-dark);\n}\n\n.studentTable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.studentTable th, .studentTable td {\n  padding: 15px;\n  text-align: left;\n  border-bottom: 1px solid #eee;\n}\n\n.studentTable th {\n  background-color: #f7f9fc;\n  font-weight: 600;\n  color: var(--primary-dark);\n}\n\n.studentTable tbody tr:hover {\n  background-color: #f7f9fc;\n}","size_bytes":5508},"styles/Home.module.css":{"content":".container {\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.title a:hover,\n.title a:focus,\n.title a:active {\n  text-decoration: underline;\n}\n\n.title {\n  margin: 0;\n  line-height: 1.15;\n  font-size: 4rem;\n}\n\n.title,\n.description {\n  text-align: center;\n}\n\n.description {\n  margin: 4rem 0;\n  line-height: 1.5;\n  font-size: 1.5rem;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  padding: 0.75rem;\n  font-size: 1.1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\n    Bitstream Vera Sans Mono, Courier New, monospace;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  max-width: 800px;\n}\n\n.card {\n  margin: 1rem;\n  padding: 1.5rem;\n  text-align: left;\n  color: inherit;\n  text-decoration: none;\n  border: 1px solid #eaeaea;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  max-width: 300px;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  color: #0070f3;\n  border-color: #0070f3;\n}\n\n.card h2 {\n  margin: 0 0 1rem 0;\n  font-size: 1.5rem;\n}\n\n.card p {\n  margin: 0;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.logo {\n  height: 1em;\n  margin-left: 0.2rem;\n}\n\n@media (max-width: 600px) {\n  .grid {\n    width: 100%;\n    flex-direction: column;\n  }\n}\n","size_bytes":1698},"styles/Login.module.css":{"content":"/* styles/Login.module.css */\n\n.loginContainer {\n  width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n}\n/* This is the dark overlay */\n.loginContainer::before {\n  content: \"\";\n  position: absolute;\n  top: 0; left: 0; right: 0; bottom: 0;\n  background: rgba(0, 0, 0, 0.4);\n}\n\n.glassCard {\n  position: relative; /* To make sure it stays above the overlay */\n  z-index: 1;\n  /* ... All other existing glassCard styles remain the same ... */\n  width: 90%;\n  max-width: 420px;\n  /* etc. */\n}\n\n/* Ensure all other styles like .title, .inputField are below this */\n/* styles/Login.module.css */\n.loginContainer {\n  position: relative; /* For overlay positioning */\n  z-index: 1; /* Ensure card is above background */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw; /* Full viewport width */\n  min-height: 100vh; /* Minimum viewport height */\n  padding: 20px;\n  box-sizing: border-box; /* Include padding in width/height */\n}\n\n.glassCard {\n  width: 90%;\n  max-width: 420px; /* Slightly wider for better look */\n  padding: 40px 30px;\n  background: rgba(255, 255, 255, 0.1); /* Lighter glass effect */\n  backdrop-filter: blur(20px); /* Stronger blur for liquid glass */\n  -webkit-backdrop-filter: blur(20px);\n  border-radius: 20px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 10px 40px 0 rgba(0, 0, 0, 0.2); /* More prominent shadow */\n  text-align: center;\n  color: #ffffff; /* White text for contrast */\n  position: relative;\n  overflow: hidden; /* Hide overflowing animations */\n  animation: slideUp 0.8s ease-out forwards; /* Slide up animation for card */\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.title {\n  font-size: 2.5rem;\n  font-weight: bold;\n  margin-bottom: 20px;\n  color: #ffffff;\n  position: relative;\n  display: inline-block; /* For typewriter effect */\n  white-space: nowrap; /* Prevent line breaks */\n  overflow: hidden;\n  animation: typing 2s steps(15, end) forwards; /* Typewriter animation */\n  border-right: 3px solid #ffffff; /* Cursor effect */\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n/* Remove cursor after typing animation finishes */\n.title[data-finished=\"true\"] {\n  border-right: none;\n}\n\n\n.subtitle {\n  font-size: 1.1rem;\n  margin-bottom: 30px;\n  opacity: 0.8;\n}\n\n.loginForm {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 30px;\n}\n\n.inputGroup {\n  position: relative;\n  animation: slideInLeft 0.8s ease-out forwards; /* Default animation */\n}\n\n.inputGroup:nth-child(2) {\n  animation: slideInRight 0.8s ease-out forwards; /* Second input (password) slides from right */\n  animation-delay: 0.2s; /* Slight delay */\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.inputField {\n  width: 100%;\n  padding: 15px 15px 15px 50px; /* Space for icon */\n  border-radius: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.4);\n  background: rgba(255, 255, 255, 0.15);\n  color: white;\n  font-size: 1rem;\n  outline: none;\n  transition: border-color 0.3s ease, background-color 0.3s ease;\n}\n\n.inputField:focus {\n  border-color: rgba(255, 255, 255, 0.8);\n  background: rgba(255, 255, 255, 0.25);\n}\n\n.inputField::placeholder {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n/* Icon styling */\n.icon {\n  position: absolute;\n  left: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.2rem;\n}\n\n\n.loginButton {\n  width: 100%;\n  padding: 15px;\n  border-radius: 10px;\n  border: none;\n  background: #ffffff; /* White button */\n  color: #3f2b96; /* Dark purple text */\n  font-size: 1.2rem;\n  font-weight: bold;\n  cursor: pointer;\n  transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;\n  animation: fadeIn 0.8s ease-out forwards;\n  animation-delay: 0.4s;\n}\n\n.loginButton:hover {\n  transform: translateY(-3px); /* Slight lift effect */\n  background-color: #f0f0f0;\n  color: #2b1f6d;\n}\n\n.loginButton:disabled {\n  background-color: rgba(255, 255, 255, 0.5);\n  color: #888;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.message {\n  margin-top: 20px;\n  font-size: 0.95rem;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Responsive adjustments */\n@media (max-width: 600px) {\n  .glassCard {\n    padding: 30px 20px;\n  }\n  .title {\n    font-size: 2rem;\n  }\n  .subtitle {\n    font-size: 0.9rem;\n  }\n  .inputField {\n    padding: 12px 12px 12px 45px;\n  }\n  .icon {\n    font-size: 1rem;\n    left: 12px;\n  }\n}\n/* Add these new styles at the end of styles/Login.module.css */\n\n.mainLoginWrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.adminLinkCard {\n  margin-top: 25px;\n  padding: 15px 25px;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-radius: 15px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  color: white;\n  text-align: center;\n  font-size: 0.95rem;\n  animation: fadeIn 1s ease-out forwards;\n  animation-delay: 0.6s; /* Appear after the main card */\n  opacity: 0; /* Start hidden */\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.adminLinkCard p {\n  margin: 0;\n}\n\n.adminLinkCard a span {\n  font-weight: bold;\n  text-decoration: underline;\n  cursor: pointer;\n}","size_bytes":5634},"styles/Manage.module.css":{"content":"/* styles/Manage.module.css */\n.pageContainer {\n  width: 100%;\n  min-height: 100vh;\n  background-color: #F8F4E3;\n  font-family: 'Georgia', serif;\n}\n\n.header {\n  padding: 20px 40px;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  border-bottom: 1px solid #EAE0C8;\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 1.8rem;\n  color: #3d3d3d;\n  font-weight: normal;\n}\n\n.backButton {\n  background: none;\n  border: 1px solid #ccc;\n  padding: 10px 15px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n}\n\n.content, .contentGrid {\n  padding: 40px;\n}\n\n.contentGrid {\n  display: grid;\n  grid-template-columns: 1fr 1.2fr;\n  gap: 30px;\n}\n\n.card {\n  background-color: #fff;\n  padding: 25px;\n  border-radius: 12px;\n  box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n  border: 1px solid #EAE0C8;\n}\n\n.card h2 {\n  margin-top: 0;\n  font-weight: normal;\n  border-bottom: 1px solid #EAE0C8;\n  padding-bottom: 15px;\n  margin-bottom: 20px;\n  color: #3d3d3d;\n}\n\n.form {\n  display: flex;\n  gap: 15px;\n}\n\n.formGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  align-items: end;\n}\n\n.input {\n  flex-grow: 1;\n  padding: 12px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  font-family: sans-serif;\n}\n\n.selectWrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.select {\n  width: 100%;\n  padding: 12px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  appearance: none;\n  -webkit-appearance: none;\n  background-color: #fff;\n  cursor: pointer;\n}\n\n.selectWrapper svg {\n  position: absolute;\n  right: 15px;\n  pointer-events: none;\n}\n\n.addButton {\n  padding: 12px 20px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: white;\n  background-color: #3D52A0;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.list {\n  list-style-type: none;\n  padding: 0;\n  margin-top: 20px;\n}\n\n.listItem {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-radius: 8px;\n  border-bottom: 1px solid #EAE0C8;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.listItem:last-child {\n  border-bottom: none;\n}\n\n.listItem:hover {\n  background-color: #f9f6ef;\n}\n\n.listItem.active {\n  background-color: #F8F4E3;\n  border-left: 3px solid #DAA520;\n}\n\n.listItem span {\n  font-size: 1.1rem;\n}\n\n.deleteButton {\n  background: transparent;\n  border: none;\n  color: #e74c3c;\n  font-size: 1.2rem;\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 50%;\n}\n\n.deleteButton:hover {\n  background-color: #ffebee;\n}\n\n.placeholder {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  min-height: 200px;\n  text-align: center;\n  color: #888;\n  border: 2px dashed #EAE0C8;\n  border-radius: 12px;\n}\n\n.message {\n  padding: 10px;\n  border-radius: 5px;\n  margin: 15px 0;\n  background-color: #f0f0f0;\n}\n\n@media (max-width: 900px) {\n  .contentGrid {\n    grid-template-columns: 1fr;\n  }\n}","size_bytes":3043},"styles/UploadMarks.module.css":{"content":"/* styles/UploadMarks.module.css */\n.pageContainer {\n  width: 100%;\n  min-height: 100vh;\n  background-color: #f7f9fc;\n}\n\n.header {\n  padding: 20px 40px;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 1.8rem;\n  color: #3D52A0;\n}\n\n/* Add these new styles to styles/UploadMarks.module.css */\n\n.cardHeader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.cardHeader h2 {\n  margin: 0;\n}\n\n.fullMarksContainer {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.fullMarksContainer label {\n  font-weight: 500;\n  color: #555;\n}\n\n.fullMarksInput {\n  width: 80px;\n  padding: 10px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.backButton {\n  background: none;\n  border: 1px solid #ccc;\n  padding: 10px 15px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n}\n\n.content {\n  padding: 40px;\n}\n\n.selectorGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  margin-bottom: 40px;\n}\n\n.selectorGrid select {\n  width: 100%;\n  padding: 15px;\n  font-size: 1rem;\n  border-radius: 8px;\n  border: 1px solid #ccc;\n  background-color: #fff;\n}\n\n.marksCard {\n  background-color: #fff;\n  padding: 30px;\n  border-radius: 12px;\n  box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n}\n\n.marksTable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.marksTable th, .marksTable td {\n  padding: 15px;\n  text-align: left;\n  border-bottom: 1px solid #eee;\n}\n\n.marksTable th {\n  background-color: #f7f9fc;\n  font-weight: 600;\n  color: #3D52A0;\n}\n\n.markInput {\n  width: 100px;\n  padding: 10px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.saveButton {\n  margin-top: 30px;\n  padding: 15px 30px;\n  font-size: 1.1rem;\n  font-weight: bold;\n  color: #fff;\n  background-color: #3f2b96;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.message {\n  margin-top: 20px;\n  font-weight: 500;\n}","size_bytes":2102},"styles/globals.css":{"content":"body {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}","size_bytes":268},"pages/admin/dashboard.tsx":{"content":"// pages/admin/dashboard.tsx\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../../lib/supabaseClient.js';\nimport { useRouter } from 'next/router';\nimport styles from '../../styles/AdminDashboard.module.css';\nimport { FiUsers, FiClipboard, FiPlusSquare, FiLogOut } from 'react-icons/fi';\nimport Link from 'next/link';\n\nexport default function AdminDashboard() {\n  const [user, setUser] = useState(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    const checkAdmin = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        router.push('/admin');\n        return;\n      }\n      const { data: roleData } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', session.user.id)\n        .single();\n      if (roleData?.role !== 'admin') {\n        await supabase.auth.signOut();\n        router.push('/admin');\n      } else {\n        setUser(session.user);\n      }\n    };\n    checkAdmin();\n  }, [router]);\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut();\n    router.push('/');\n  };\n\n  if (!user) {\n    return <div className={styles.loading}>Verifying Admin Access...</div>;\n  }\n\n  return (\n    <div className={styles.dashboardLayout}>\n      <div>\n        <header className={styles.header}>\n          <h1>Welcome, Admin!</h1>\n          <p>Select an option below to manage the school data.</p>\n        </header>\n\n        <main className={styles.navGrid}>\n          {/* Card 1: Manage Students */}\n          <Link href=\"/admin/manage-students\" className={styles.navCard}>\n            <div className={styles.cardIcon}><FiUsers /></div>\n            <h2 className={styles.cardTitle}>Manage Students</h2>\n          </Link>\n\n          {/* Card 2: Manage Teachers */}\n          <Link href=\"#\" className={styles.navCard}>\n            <div className={styles.cardIcon}><FiUsers /></div>\n            <h2 className={styles.cardTitle}>Manage Teachers</h2>\n          </Link>\n\n          {/* Card 3: Manage Classes & Sections */}\n          <Link href=\"/admin/manage-classes\" className={styles.navCard}>\n            <div className={styles.cardIcon}><FiClipboard /></div>\n            <h2 className={styles.cardTitle}>Manage Classes</h2>\n          </Link>\n\n          {/* Card 4: Manage Subjects */}\n          <Link href=\"#\" className={styles.navCard}>\n            <div className={styles.cardIcon}><FiPlusSquare /></div>\n            <h2 className={styles.cardTitle}>Manage Subjects</h2>\n          </Link>\n        </main>\n        \n        <div className={styles.logoutButtonContainer}>\n            <button onClick={handleLogout} className={styles.logoutButton}>\n                <FiLogOut style={{ marginRight: '8px' }} /> Logout\n            </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2817},"pages/admin/index.tsx":{"content":"// pages/admin/index.tsx\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../../lib/supabaseClient.js';\nimport styles from '../../styles/Login.module.css';\nimport { FiShield, FiLock } from 'react-icons/fi';\nimport { useRouter } from 'next/router';\n\nexport default function AdminLoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setMessage('');\n    setLoading(true);\n\n    // Step 1: Sign in the user\n    const { data: { user }, error: signInError } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    });\n\n    if (signInError) {\n      setMessage('Error: Invalid login credentials.');\n      setLoading(false);\n      return;\n    }\n\n    // Step 2: Check if the user has the 'admin' role\n    if (user) {\n      const { data: roleData, error: roleError } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', user.id)\n        .single();\n\n      if (roleError || !roleData || roleData.role !== 'admin') {\n        setMessage('Error: You do not have admin privileges.');\n        await supabase.auth.signOut(); // Log out non-admin users\n      } else {\n        setMessage('Admin login successful! Redirecting...');\n        router.push('/admin/dashboard');\n      }\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div\n      className={styles.loginContainer}\n      style={{\n        backgroundImage: \"url('/background2.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n      }}\n    >\n      <div className={styles.glassCard}>\n        <h2 className={styles.title}>Admin Login</h2>\n        <p className={styles.subtitle}>Management Panel Access</p>\n        <form onSubmit={handleLogin} className={styles.loginForm}>\n          <div className={styles.inputGroup}>\n            <FiShield className={styles.icon} />\n            <input\n              type=\"email\"\n              placeholder=\"Admin Email ID\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className={styles.inputField}\n            />\n          </div>\n          <div className={styles.inputGroup}>\n            <FiLock className={styles.icon} />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              className={styles.inputField}\n            />\n          </div>\n          <button type=\"submit\" disabled={loading} className={styles.loginButton}>\n            {loading ? 'Authenticating...' : 'Login as Admin'}\n          </button>\n        </form>\n        {message && <p className={styles.message} style={{ color: message.startsWith('Error') ? '#ff9a9a' : '#a2ff9a' }}>{message}</p>}\n      </div>\n    </div>\n  );\n}","size_bytes":3060},"pages/admin/manage-classes.tsx":{"content":"// pages/admin/manage-classes.tsx\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../../lib/supabaseClient.js';\nimport { useRouter } from 'next/router';\nimport manageStyles from '../../styles/Manage.module.css';\nimport { FiPlus, FiTrash2 } from 'react-icons/fi';\n\ntype Class = { id: number; name: string; };\ntype Section = { id: number; name: string; class_id: number; };\n\nexport default function ManageClasses() {\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [selectedClass, setSelectedClass] = useState<Class | null>(null);\n  const [newClassName, setNewClassName] = useState('');\n  const [newSectionName, setNewSectionName] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  const fetchClasses = async () => {\n    setLoading(true);\n    const { data, error } = await supabase.from('classes').select('*').order('name');\n    if (error) setMessage('Error fetching classes');\n    else setClasses(data || []);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchClasses();\n  }, []);\n\n  const handleClassSelect = async (cls: Class) => {\n    setSelectedClass(cls);\n    const { data, error } = await supabase.from('sections').select('*').eq('class_id', cls.id).order('name');\n    if (error) setMessage('Error fetching sections');\n    else setSections(data || []);\n  };\n\n  const handleAddClass = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newClassName.trim()) return;\n    const { error } = await supabase.from('classes').insert([{ name: newClassName }]);\n    if (error) setMessage(`Error: ${error.message}`);\n    else {\n      setNewClassName('');\n      fetchClasses();\n    }\n  };\n\n  const handleAddSection = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newSectionName.trim() || !selectedClass) return;\n    const { error } = await supabase.from('sections').insert([{ name: newSectionName, class_id: selectedClass.id }]);\n    if (error) setMessage(`Error: ${error.message}`);\n    else {\n      setNewSectionName('');\n      handleClassSelect(selectedClass);\n    }\n  };\n\n  const handleDeleteSection = async (sectionId: number) => {\n    if (window.confirm('Are you sure you want to delete this section?')) {\n      const { error } = await supabase.from('sections').delete().eq('id', sectionId);\n      if (error) setMessage(`Error: ${error.message}`);\n      else {\n        handleClassSelect(selectedClass!);\n      }\n    }\n  };\n  \n  const handleDeleteClass = async (classId: number) => {\n    if (window.confirm('Are you sure you want to delete this class?')) {\n        const { error } = await supabase.from('classes').delete().eq('id', classId);\n        if (error) setMessage(`Error: ${error.message}`);\n        else {\n            setMessage('Class deleted successfully!');\n            fetchClasses();\n            setSelectedClass(null);\n            setSections([]);\n        }\n    }\n  };\n\n  return (\n    <div className={manageStyles.pageContainer}>\n      <header className={manageStyles.header}>\n        <button onClick={() => router.push('/admin/dashboard')} className={manageStyles.backButton}>← Back</button>\n        <h1>Manage Classes & Sections</h1>\n      </header>\n\n      <main className={manageStyles.contentGrid}>\n        <div className={manageStyles.card}>\n          <h2>Classes</h2>\n          <form onSubmit={handleAddClass} className={manageStyles.form}>\n            <input type=\"text\" placeholder=\"Add New Class\" value={newClassName} onChange={(e) => setNewClassName(e.target.value)} className={manageStyles.input} />\n            <button type=\"submit\" className={manageStyles.addButton}><FiPlus /></button>\n          </form>\n          {loading ? <p>Loading...</p> : (\n            <ul className={manageStyles.list}>\n              {classes.map((cls) => (\n                <li key={cls.id} className={`${manageStyles.listItem} ${selectedClass?.id === cls.id ? manageStyles.active : ''}`} onClick={() => handleClassSelect(cls)}>\n                  <span>{cls.name}</span>\n                   <button onClick={(e) => { e.stopPropagation(); handleDeleteClass(cls.id); }} className={manageStyles.deleteButton}><FiTrash2 /></button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n\n        <div className={manageStyles.card}>\n          {selectedClass ? (\n            <>\n              <h2>Sections for {selectedClass.name}</h2>\n              <form onSubmit={handleAddSection} className={manageStyles.form}>\n                <input type=\"text\" placeholder=\"Add New Section\" value={newSectionName} onChange={(e) => setNewSectionName(e.target.value)} className={manageStyles.input} />\n                <button type=\"submit\" className={manageStyles.addButton}><FiPlus /></button>\n              </form>\n              <ul className={manageStyles.list}>\n                {sections.map((sec) => (\n                  <li key={sec.id} className={manageStyles.listItem}>\n                    <span>{sec.name}</span>\n                    <button onClick={() => handleDeleteSection(sec.id)} className={manageStyles.deleteButton}><FiTrash2 /></button>\n                  </li>\n                ))}\n              </ul>\n            </>\n          ) : (\n            <div className={manageStyles.placeholder}>\n              <p>Select a class from the left to manage its sections.</p>\n            </div>\n          )}\n        </div>\n      </main>\n      {message && <div className={manageStyles.message}>{message}</div>}\n    </div>\n  );\n}","size_bytes":5571},"pages/admin/manage-students.tsx":{"content":"// pages/admin/manage-students.tsx\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../../lib/supabaseClient.js';\nimport { useRouter } from 'next/router';\nimport manageStyles from '../../styles/Manage.module.css';\nimport { FiUserPlus, FiTrash2, FiChevronDown } from 'react-icons/fi';\n\ntype Class = { id: number; name: string; };\ntype Section = { id: number; name: string; };\ntype Student = { id: number; name: string; roll_number: number; };\n\nexport default function ManageStudents() {\n  const [classes, setClasses] = useState<Class[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSection, setSelectedSection] = useState('');\n  const [newStudentName, setNewStudentName] = useState('');\n  const [newStudentRoll, setNewStudentRoll] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchClasses = async () => {\n      const { data } = await supabase.from('classes').select('*').order('name');\n      setClasses(data || []);\n      setLoading(false);\n    };\n    fetchClasses();\n  }, []);\n\n  useEffect(() => {\n    if (selectedClass) {\n      const fetchSections = async () => {\n        const { data } = await supabase.from('sections').select('*').eq('class_id', selectedClass).order('name');\n        setSections(data || []);\n        setStudents([]);\n        setSelectedSection('');\n      };\n      fetchSections();\n    }\n  }, [selectedClass]);\n\n  useEffect(() => {\n    if (selectedSection) {\n      const fetchStudents = async () => {\n        setLoading(true);\n        const { data } = await supabase.from('students').select('*').eq('section_id', selectedSection).order('roll_number');\n        setStudents(data || []);\n        setLoading(false);\n      };\n      fetchStudents();\n    }\n  }, [selectedSection]);\n  \n  const handleAddStudent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedClass || !selectedSection || !newStudentName.trim() || !newStudentRoll.trim()) {\n      setMessage('Please fill all fields.');\n      return;\n    }\n    const { error } = await supabase.from('students').insert([{ \n      name: newStudentName, \n      roll_number: parseInt(newStudentRoll, 10),\n      class_id: parseInt(selectedClass, 10),\n      section_id: parseInt(selectedSection, 10),\n    }]);\n\n    if (error) {\n      setMessage(`Error: ${error.message}`);\n    } else {\n      setMessage('Student added successfully!');\n      setNewStudentName('');\n      setNewStudentRoll('');\n      const { data } = await supabase.from('students').select('*').eq('section_id', selectedSection).order('roll_number');\n      setStudents(data || []);\n    }\n  };\n\n  const handleDeleteStudent = async (studentId: number) => {\n    if (window.confirm('Are you sure you want to delete this student?')) {\n      const { error } = await supabase.from('students').delete().eq('id', studentId);\n      if (error) {\n        setMessage(`Error: ${error.message}`);\n      } else {\n        setMessage('Student deleted successfully!');\n        setStudents(students.filter(s => s.id !== studentId));\n      }\n    }\n  };\n\n  return (\n    <div className={manageStyles.pageContainer}>\n      <header className={manageStyles.header}>\n        <button onClick={() => router.push('/admin/dashboard')} className={manageStyles.backButton}>← Back</button>\n        <h1>Manage Students</h1>\n      </header>\n      \n      <main className={manageStyles.content}>\n        <div className={manageStyles.card}>\n          <h2>Add New Student</h2>\n          {message && <p className={manageStyles.message}>{message}</p>}\n          <form onSubmit={handleAddStudent} className={manageStyles.formGrid}>\n            <input type=\"text\" placeholder=\"Student Name\" value={newStudentName} onChange={(e) => setNewStudentName(e.target.value)} className={manageStyles.input} />\n            <input type=\"number\" placeholder=\"Roll Number\" value={newStudentRoll} onChange={(e) => setNewStudentRoll(e.target.value)} className={manageStyles.input} />\n            <div className={manageStyles.selectWrapper}>\n              <select value={selectedClass} onChange={(e) => setSelectedClass(e.target.value)} className={manageStyles.select}>\n                <option value=\"\">Select Class</option>\n                {classes.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}\n              </select>\n              <FiChevronDown />\n            </div>\n            <div className={manageStyles.selectWrapper}>\n              <select value={selectedSection} onChange={(e) => setSelectedSection(e.target.value)} className={manageStyles.select} disabled={!selectedClass}>\n                <option value=\"\">Select Section</option>\n                {sections.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}\n              </select>\n              <FiChevronDown />\n            </div>\n            <button type=\"submit\" className={manageStyles.addButton}><FiUserPlus /> Add Student</button>\n          </form>\n        </div>\n\n        <div className={manageStyles.card}>\n          <h2>Student List</h2>\n          {(loading && selectedSection) ? <p>Loading students...</p> : (\n            <ul className={manageStyles.list}>\n              {students.length > 0 ? students.map((student) => (\n                <li key={student.id} className={manageStyles.listItem}>\n                  <span><strong>{student.roll_number}</strong> - {student.name}</span>\n                  <button onClick={() => handleDeleteStudent(student.id)} className={manageStyles.deleteButton}><FiTrash2 /></button>\n                </li>\n              )) : <p>Select a class and section to see the student list.</p>}\n            </ul>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5877},"pages/admin/manage-teachers.tsx":{"content":"// pages/admin/manage-teachers.tsx\nimport { useEffect, useState, FormEvent } from 'react';\nimport { supabase } from '../../lib/supabaseClient.js';\nimport manageStyles from '../../styles/Manage.module.css';\nimport { FiUserPlus, FiTrash2 } from 'react-icons/fi';\nimport { useRouter } from 'next/router';\n\ntype Teacher = { id: string; email: string; name: string; };\n\nexport default function ManageTeachers() {\n  const [teachers, setTeachers] = useState<Teacher[]>([]);\n  const [newTeacherName, setNewTeacherName] = useState('');\n  const [newTeacherEmail, setNewTeacherEmail] = useState('');\n  const [newTeacherPassword, setNewTeacherPassword] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  // --- Function to fetch all teachers from our new VIEW ---\n  const fetchTeachers = async () => {\n    setLoading(true);\n    const { data, error } = await supabase.from('teachers_list').select('*');\n    if (error) {\n      setMessage(`Error fetching teachers: ${error.message}`);\n    } else {\n      setTeachers(data || []);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTeachers();\n  }, []);\n\n  // --- Function to add a new teacher using our new SQL function ---\n  const handleAddTeacher = async (e: FormEvent) => {\n    e.preventDefault();\n    if (!newTeacherName.trim() || !newTeacherEmail.trim() || !newTeacherPassword.trim()) {\n      setMessage('Please fill all fields.');\n      return;\n    }\n    // Calling the PostgreSQL function `create_new_teacher`\n    const { error } = await supabase.rpc('create_new_teacher', {\n      email: newTeacherEmail,\n      password: newTeacherPassword,\n      name: newTeacherName\n    });\n\n    if (error) {\n      setMessage(`Error creating teacher: ${error.message}`);\n    } else {\n      setMessage('Teacher created successfully!');\n      setNewTeacherName('');\n      setNewTeacherEmail('');\n      setNewTeacherPassword('');\n      fetchTeachers(); // Refresh the list\n    }\n  };\n\n  // --- Function to delete a teacher using our new SQL function ---\n  const handleDeleteTeacher = async (teacherId: string) => {\n    if (window.confirm('Are you sure you want to delete this teacher?')) {\n      // Calling the PostgreSQL function `delete_teacher`\n      const { error } = await supabase.rpc('delete_teacher', {\n        teacher_id: teacherId\n      });\n      if (error) {\n        setMessage(`Error deleting teacher: ${error.message}`);\n      } else {\n        setMessage('Teacher deleted successfully!');\n        fetchTeachers(); // Refresh the list\n      }\n    }\n  };\n\n  return (\n    <div className={manageStyles.pageContainer}>\n      <header className={manageStyles.header}>\n        <button onClick={() => router.push('/admin/dashboard')} className={manageStyles.backButton}>← Back</button>\n        <h1>Manage Teachers</h1>\n      </header>\n      \n      <main className={manageStyles.content}>\n        <div className={manageStyles.card}>\n          <h2>Add New Teacher</h2>\n          {message && <p className={manageStyles.message}>{message}</p>}\n          <form onSubmit={handleAddTeacher} className={manageStyles.formGrid}>\n            <input type=\"text\" placeholder=\"Teacher Name\" value={newTeacherName} onChange={(e) => setNewTeacherName(e.target.value)} className={manageStyles.input} />\n            <input type=\"email\" placeholder=\"Teacher Email\" value={newTeacherEmail} onChange={(e) => setNewTeacherEmail(e.target.value)} className={manageStyles.input} />\n            <input type=\"password\" placeholder=\"Initial Password\" value={newTeacherPassword} onChange={(e) => setNewTeacherPassword(e.target.value)} className={manageStyles.input} />\n            <button type=\"submit\" className={manageStyles.addButton}><FiUserPlus /> Add Teacher</button>\n          </form>\n        </div>\n\n        <div className={manageStyles.card}>\n          <h2>Teacher List</h2>\n          {loading ? <p>Loading...</p> : (\n            <ul className={manageStyles.list}>\n              {teachers.map((teacher) => (\n                <li key={teacher.id} className={manageStyles.listItem}>\n                  <span>\n                    <strong>{teacher.name || 'No Name'}</strong> - {teacher.email}\n                  </span>\n                  <button onClick={() => handleDeleteTeacher(teacher.id)} className={manageStyles.deleteButton}><FiTrash2 /></button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":4479},"pages/api/hello.ts":{"content":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n","size_bytes":307}},"version":1}